@model OldGoodsManage.Models.t_User
@{
    ViewBag.Title = "修改密码";
    Layout = "~/Views/Shared/_BgLayout.cshtml";
}

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>修改密码</title>
<link href="../../style/user.css"   type="text/css"  rel="Stylesheet" />
<script language="javascript" type="text/javascript">

    //CharMode函数     
    //测试某个字符是属于哪一类.     
    function CharMode(iN) {
        if (iN >= 48 && iN <= 57) //数字     
            return 1;
        if (iN >= 65 && iN <= 90) //大写字母     
            return 2;
        if (iN >= 97 && iN <= 122) //小写     
            return 4;
        else
            return 8; //特殊字符     
    }
    //bitTotal函数     
    //计算出当前密码当中一共有多少种模式     
    function bitTotal(num) {
        modes = 0;
        for (i = 0; i < 4; i++) {
            if (num & 1) modes++;
            num >>>= 1;
        }
        return modes;
    }
    //checkStrong函数     
    //返回密码的强度级别     

    function checkStrong(sPW) {
        if (sPW.length <= 4)
            return 0; //密码太短     
        Modes = 0;
        for (i = 0; i < sPW.length; i++) {
            //测试每一个字符的类别并统计一共有多少种模式.     
            Modes |= CharMode(sPW.charCodeAt(i));
        }
        return bitTotal(Modes);
    }

    //pwStrength函数     
    //当用户放开键盘或密码输入框失去焦点时,根据不同的级别显示不同的颜色     
    function pwStrength(pwd) {
        O_color = "#e0f0ff";
        L_color = "#FF0000";
        M_color = "#FF9900";
        H_color = "#33CC00";
        if (pwd == null || pwd == '') {
            Lcolor = Mcolor = Hcolor = O_color;
        }
        else {
            S_level = checkStrong(pwd);
            switch (S_level) {
                case 0:
                    Lcolor = Mcolor = Hcolor = O_color;
                case 1:
                    Lcolor = L_color;
                    Mcolor = Hcolor = O_color;
                    break;
                case 2:
                    Lcolor = Mcolor = M_color;
                    Hcolor = O_color;
                    break;
                default:
                    Lcolor = Mcolor = Hcolor = H_color;
            }
        }

        document.getElementById("strength_L").style.background = Lcolor;
        document.getElementById("strength_M").style.background = Mcolor;
        document.getElementById("strength_H").style.background = Hcolor;
        return;
    }     

    
</script>  


</head>
<body  >
<div class="MainDiv">

<table  border="0" cellpadding="0" cellspacing="0" class="CContent" >
  @using (Html.BeginForm())
  {
  <tr >
      <th class="tablestyle_title" >后台用户修改页面</th>
  </tr>
  <tr >
    <td class="CPanel" >
		
		<table border="0" cellpadding="0" cellspacing="0" style="width:100%" >
		<tr>
			<td align="left" >
                <input id="Submit1" type="submit" value="后台用户管理" name="submit" class="button" />	
               
				<input type="button" name="Submit2" value="返回" class="button" onclick="window.history.go(-1);"/>			</td>
		</tr>
       
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)
            @Html.HiddenFor(model=>model.userID)
		<tr align="center">
			<td class="TablePanel">
            </td>
		</tr>
		<tr>
			<td width="100%">
				<fieldset style="height:450px;">
				<legend>修改用户密码</legend>
				<table border="0" cellpadding="2" cellspacing="1" style="width:100%; font-size: 14px">
					 <tr></tr> <tr></tr>
					  <tr>
					    <td nowrap="nowrap" align="right" width="50%" >@Html.LabelFor(model => model.loginName):</td>
					    <td width="50%"> @Html.DisplayFor(model => model.loginName)
                        </td>
					  </tr>
                     <tr>
					    <td nowrap="nowrap" align="right" width="50%" >@Html.LabelFor(model => model.userName):</td>
					    <td width="50%"> @Html.DisplayFor(model => model.userName)
                        </td>
                     </tr>
                      <tr>
					    <td nowrap="nowrap" align="right" width="50%"> 旧密码:</td>
					    <td width="50%">  @Html.EditorFor(model => model.password)
				        </td>
					  </tr> 
                       <tr>
					    <td nowrap="nowrap" align="right" width="50%">新 @Html.LabelFor(model=>model.password):</td>
					    <td width="50%"> <input id="Text1"  name="changPwd" type="password"  onkeyup="pwStrength(this.value)" onblur="pwStrength(this.value)" />
                         <span  class="editor-field"  style=" color:Red">* @Html.ValidationMessageFor(model=>model.password)</span>
				        </td>
					  </tr> 

                     <tr>
                      <td width="50%"></td>
                      <td width="50%">
                       <div class="div3">
                         <table border="1" cellpadding="1" cellspacing="1"  >   
                          <tr>   
                           <td id="strength_L" style="width: 100px; height: 19px;" class="style1">   
                            弱</td>   
                           <td id="strength_M" style="width: 100px; height: 19px;" class="style1">   
                            中</td>   
                           <td id="strength_H" style="width: 100px; height: 19px;" class="style1">   
                            强</td>   
                         </tr>   
                       </table>   
                      </div>
                      </td>
                    </tr>

                      <tr>
					    <td nowrap="nowrap" align="right" width="50%">确认密码:</td>
					    <td width="50%"> <input id="Text2"  type="password" name="changPwdAgain" />
                         <span  class="editor-field"  style=" color:Red">* </span>
				        </td>
					  </tr> 

                    
					  
                      
					  </table>
			    <br />
				</fieldset>			
			</td>
		</tr>
        <tr >
			<td colspan="2" align="center" height="50px">
                <input id="Submit2" type="submit" value="修改" name="submit" class="button"/>
			
			 <input id="Reset1" type="reset" value="重置" class="button" /></td>
		</tr>
   	</table>
	
	
	 </td>
  </tr>
  
  
  }	
		
		

</table>

</div>

</body>
</html>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

